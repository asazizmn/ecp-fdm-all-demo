/**
 * Student.java
 * - basic demonstration of a class
 * - this also demonstrates encapsulation and abstraction
 * - for more details on encapsulation vs abstraction: https://www.w3schools.blog/abstraction-vs-encapsulation-in-java
 * 
 * - for UML notations:   https://khalilstemmler.com/articles/uml-cheatsheet/
 *
 * @author	S. Aziz
 * @version	0.0.1
 * @since	12/10/22
 */

package com.fdmgroup.ood1.classes;



public class Student {
	
	// Attributes (a.k.a. data members, instance variables) ////////////////////////
	
	private int id;
	private String name;

	
	
	// Behaviour (a.k.a. methods) ////////////////////////
	// ... the following can, basically, be generated by eclipse
	
	// default constructor - used to initialise the object with default values
	public Student() {
		this.id = 0;
		this.name = "";
	}
	
	
	// custom constructor - used to initialise the object with custom data
	public Student(int id, String name) {
		this.id = id;
		this.name = name;
	}

	
	
	// getters & setters - used to get & set values in the object
	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}


	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}
	
	
	
	// just an example to show the concept of abstraction
	// the user would not know the implementation details i.e. steps 1 to 6
	// but the user would know that calling this method would save student data in the db
	// ... i.e. studentVar.storeInDatabase() 
	public void storeInDatabase() {
		
		// 1. try to connect with database
		
		// 2. verify database connection
		
		// 3. locate the appropriate table in database
		
		// 4. serialise this student object
		
		// 5. push and store this student object in database
		
		// 6. close connection with database
	}
	
	
	
	// main runner - used to create an object and run it
	public static void main(String args[]) {
		
		// instantiate the student class
		Student student1 = new Student(12, "Abdullah");
		
		// provided the class - level attributes are accessible
		System.out.println(student1.id);
		System.out.println(student1.name);
		
		// otherwise, it's normally better practice to use the getters
		System.out.println(student1.getId());
		System.out.println(student1.getName());
		
		
		// several objects can be created from one class definition
		Student student2 = new Student(13, "Ammar");
		Student student3 = new Student(14, "Yasir");
		Student student4 = new Student(15, "John");
		Student student5 = new Student(16, "Chris");
		
		
		// this is all the user would need to know
		// internally, steps 1 to 6 would be executed
		student5.storeInDatabase();
	}



}