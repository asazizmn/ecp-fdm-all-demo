/**
 * TestingObjectEquals.java
 * - testing the implementation of equals and hashcode
 * 
 * @author	S. Aziz
 * @version	0.0.1
 * @since	20/10/22
 */

package com.fdmgroup.ood1.polymorphism;

import java.util.Objects;



public class ObjectEqualsDemo {

	private int id;
	private String name;
	private int phoneNumber;
	private boolean isRound;
	
	
	// custom constructor
	public ObjectEqualsDemo(int id, String name, int phoneNumber, boolean isRound) {
		this.id = id;
		this.name = name;
		this.phoneNumber = phoneNumber;
		this.isRound = isRound;
	}
	
	
	
	/**
	 * Eclipse generated, helps to test if two ObjectEqualsDemo are truly equal 
	 */
	@Override
	public boolean equals(Object obj) {
		
		//
		if (this == obj) {
			return true;
		}
		
		if (obj == null) {
			return false;
		}
		
		if (getClass() != obj.getClass()) {
			return false;
		}
		
		ObjectEqualsDemo other = (ObjectEqualsDemo) obj;
		
		
		return id == other.id && isRound == other.isRound && Objects.equals(name, other.name)
				&& phoneNumber == other.phoneNumber;
	}
	
	
	/**
	 * Eclipse generated, hashCode() returns an integer value, generated by a hashing algorithm.
	 * Objects that are equal (according to their equals()) must return the same hash code.
	 * Different objects do not need to return different hash codes.
	 * 
	 * Context: Collections can be inefficient in certain situations (ie when dealing with huge lists). 
	 * Java provides a number of data structures for dealing with this issue specifically. 
	 * For example, several Map interface implementations are hash tables.
	 * When using a hash table, these collections calculate the hash value for a given key using the hashCode() method. 
	 * Then they use this value internally to store the data so that access operations are much more efficient.
	 */
	@Override
	public int hashCode() {
		return Objects.hash(id, isRound, name, phoneNumber);
	}



	public static void main(String[] args) {
		
		ObjectEqualsDemo obj1 = new ObjectEqualsDemo(1, "Shri", 12345678, true);
		ObjectEqualsDemo obj2 = new ObjectEqualsDemo(1, "Shri", 12345678, true);
		
		// without overriding equals, the following is false
		System.out.println(obj1.equals(obj2));
	}

}
